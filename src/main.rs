use btrs::conn::{announce, Handshake};
use btrs::future::timeout;
use btrs::peer;
use btrs::torrent::TorrentFile;
use futures::stream::FuturesUnordered;
use futures::StreamExt;
use tokio::fs;

// fn main() {
//     const a: &[u8] = &[
//         19, 66, 105, 116, 84, 111, 114, 114, 101, 110, 116, 32, 112, 114, 111, 116, 111, 99, 111,
//         108, 0, 0, 0, 0, 0, 24, 0, 5, 134, 212, 200, 0, 36, 164, 105, 190, 76, 80, 188, 90, 16, 44,
//         247, 23, 128, 49, 0, 116, 45, 70, 68, 53, 49, 93, 199, 45, 80, 111, 98, 52, 83, 126, 105,
//         112, 82, 100, 118, 77, 0, 0, 0, 169, 5, 255, 255, 239, 254, 255, 255, 239, 255, 223, 255,
//         255, 253, 255, 255, 255, 255, 255, 247, 254, 255, 255, 255, 191, 255, 255, 255, 127, 254,
//         255, 223, 255, 191, 255, 255, 255, 127, 255, 254, 255, 191, 255, 255, 127, 223, 247, 255,
//         254, 255, 223, 255, 255, 255, 127, 223, 255, 255, 239, 253, 255, 255, 255, 255, 255, 255,
//         255, 247, 239, 255, 255, 255, 255, 255, 255, 255, 251, 255, 254, 255, 255, 255, 255, 255,
//         255, 255, 255, 239, 255, 255, 247, 255, 255, 255, 223, 255, 191, 255, 255, 255, 255, 250,
//         255, 191, 255, 255, 255, 255, 239, 255, 255, 255, 255, 253, 253, 255, 255, 255, 243, 255,
//         255, 255, 255, 255, 255, 255, 255, 255, 223, 255, 255, 251, 255, 255, 251, 247, 255, 255,
//         255, 239, 247, 254, 255, 255, 239, 255, 255, 255, 255, 255, 255, 255, 255, 255, 223, 255,
//         255, 255, 255, 255, 255, 255, 255, 255, 255, 223, 255, 255, 255, 240, 0, 0, 0, 5, 4, 0, 0,
//         0, 19, 0, 0, 0, 5, 4, 0, 0, 0, 31, 0, 0, 0, 5, 4, 0, 0, 0, 51, 0, 0, 0, 5, 4, 0, 0, 0, 66,
//         0, 0, 0, 5, 4, 0, 0, 0, 94, 0, 0, 0, 5, 4, 0, 0, 0, 140, 0, 0, 0, 5, 4, 0, 0, 0, 151, 0, 0,
//         0, 5, 4, 0, 0, 0, 177, 0, 0, 0, 5, 4, 0, 0, 0, 208, 0, 0, 0, 5, 4, 0, 0, 0, 223, 0, 0, 0,
//         5, 4, 0, 0, 0, 234, 0, 0, 0, 5, 4, 0, 0, 0, 249, 0, 0, 0, 5, 4, 0, 0, 1, 24, 0, 0, 0, 5, 4,
//         0, 0, 1, 47, 0, 0, 0, 5, 4, 0, 0, 1, 57, 0, 0, 0, 5, 4, 0, 0, 1, 80, 0, 0, 0, 5, 4, 0, 0,
//         1, 90, 0, 0, 0, 5, 4, 0, 0, 1, 100, 0, 0, 0, 5, 4, 0, 0, 1, 119, 0, 0, 0, 5, 4, 0, 0, 1,
//         130, 0, 0, 0, 5, 4, 0, 0, 1, 160, 0, 0, 0, 5, 4, 0, 0, 1, 170, 0, 0, 0, 5, 4, 0, 0, 1, 195,
//         0, 0, 0, 5, 4, 0, 0, 1, 206, 0, 0, 0, 5, 4, 0, 0, 2, 12, 0, 0, 0, 5, 4, 0, 0, 2, 19, 0, 0,
//         0, 5, 4, 0, 0, 2, 85, 0, 0, 0, 5, 4, 0, 0, 2, 103, 0, 0, 0, 5, 4, 0, 0, 2, 171, 0, 0, 0, 5,
//         4, 0, 0, 2, 196, 0, 0, 0, 5, 4, 0, 0, 2, 226, 0, 0, 0, 5, 4, 0, 0, 2, 241, 0, 0, 0, 5, 4,
//         0, 0, 3, 29, 0, 0, 0, 5, 4, 0, 0, 3, 31, 0, 0, 0, 5, 4, 0, 0, 3, 41, 0, 0, 0, 5, 4, 0, 0,
//         3, 83, 0, 0, 0, 5, 4, 0, 0, 3, 126, 0, 0, 0, 5, 4, 0, 0, 3, 134, 0, 0, 0, 5, 4, 0, 0, 3,
//         164, 0, 0, 0, 5, 4, 0, 0, 3, 165, 0, 0, 0, 5, 4, 0, 0, 3, 242, 0, 0, 0, 5, 4, 0, 0, 4, 13,
//         0, 0, 0, 5, 4, 0, 0, 4, 37, 0, 0, 0, 5, 4, 0, 0, 4, 44, 0, 0, 0, 5, 4, 0, 0, 4, 75, 0, 0,
//         0, 5, 4, 0, 0, 4, 84, 0, 0, 0, 5, 4, 0, 0, 4, 95, 0, 0, 0, 5, 4, 0, 0, 4, 115, 0, 0, 0, 5,
//         4, 0, 0, 4, 194, 0, 0, 0, 5, 4, 0, 0, 5, 26, 0, 0, 0, 1, 1,
//     ];
//     println!("{}", unsafe { std::str::from_utf8_unchecked(a) });
// }

#[tokio::main]
async fn main() {
    open().await;
}

async fn open() {
    let v = fs::read("t.torrent").await.unwrap();
    let t = TorrentFile::parse(&v).unwrap();
    let peer_id = peer::generate_peer_id();
    let response = announce(&t, &peer_id, 6881).await.unwrap();

    println!("{:?}", response);

    let h = &Handshake::new(&t.info_hash, &peer_id);

    let mut futs: FuturesUnordered<_> = response
        .peers
        .iter()
        .map(|peer| {
            async move {
                if let Err(e) = timeout(h.send(peer), 10).await {
                    println!("{:?}: {:?}", peer, e);
                }
            }
        })
        .collect();

    while let Some(_) = futs.next().await {
        println!("done");
    }
}
